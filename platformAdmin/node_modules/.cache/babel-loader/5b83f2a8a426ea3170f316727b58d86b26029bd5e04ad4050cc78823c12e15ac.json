{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\edwin\\\\Downloads\\\\archive\\\\CHENATIONS DOCUMENTS\\\\Wellsfargo\\\\Wopital\\\\platformAdmin\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [adminUser, setAdminUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      if (session !== null && session !== void 0 && session.user) {\n        setUser(session.user);\n        await loadAdminUser(session.user.id);\n      }\n      setLoading(false);\n    };\n    getInitialSession();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (session !== null && session !== void 0 && session.user) {\n        setUser(session.user);\n        await loadAdminUser(session.user.id);\n      } else {\n        setUser(null);\n        setAdminUser(null);\n      }\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const loadAdminUser = async userId => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('platform_admins').select('*').eq('user_id', userId).single();\n      if (error) {\n        console.error('Error loading admin user:', error);\n        // If admin user doesn't exist, sign out\n        await signOut();\n        toast.error('Access denied. Admin privileges required.');\n        return;\n      }\n      setAdminUser(data);\n    } catch (error) {\n      console.error('Error loading admin user:', error);\n      await signOut();\n      toast.error('Access denied. Admin privileges required.');\n    }\n  };\n  const signIn = async (email, password) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n\n      // Check if user is an admin\n      const {\n        data: adminData,\n        error: adminError\n      } = await supabase.from('platform_admins').select('*').eq('user_id', data.user.id).single();\n      if (adminError || !adminData) {\n        await supabase.auth.signOut();\n        throw new Error('Access denied. Admin privileges required.');\n      }\n      setUser(data.user);\n      setAdminUser(adminData);\n      toast.success('Welcome back!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      toast.error(error.message || 'Failed to sign in');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const signUp = async (email, password, adminData) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (error) throw error;\n\n      // Create admin user record\n      const {\n        error: adminError\n      } = await supabase.from('platform_admins').insert([{\n        user_id: data.user.id,\n        first_name: adminData.firstName,\n        last_name: adminData.lastName,\n        email: email,\n        role: 'admin'\n      }]);\n      if (adminError) throw adminError;\n      setUser(data.user);\n      setAdminUser({\n        user_id: data.user.id,\n        first_name: adminData.firstName,\n        last_name: adminData.lastName,\n        email: email,\n        role: 'admin'\n      });\n      toast.success('Admin account created successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error signing up:', error);\n      toast.error(error.message || 'Failed to create admin account');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const signOut = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUser(null);\n      setAdminUser(null);\n      toast.success('Signed out successfully');\n    } catch (error) {\n      console.error('Error signing out:', error);\n      toast.error('Failed to sign out');\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`\n      });\n      if (error) throw error;\n      toast.success('Password reset email sent!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      toast.error(error.message || 'Failed to send reset email');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const updatePassword = async newPassword => {\n    try {\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      if (error) throw error;\n      toast.success('Password updated successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error updating password:', error);\n      toast.error(error.message || 'Failed to update password');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      const {\n        error\n      } = await supabase.from('platform_admins').update({\n        first_name: profileData.firstName,\n        last_name: profileData.lastName,\n        updated_at: new Date().toISOString()\n      }).eq('user_id', user.id);\n      if (error) throw error;\n      setAdminUser({\n        ...adminUser,\n        first_name: profileData.firstName,\n        last_name: profileData.lastName\n      });\n      toast.success('Profile updated successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast.error(error.message || 'Failed to update profile');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const value = {\n    user,\n    adminUser,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updatePassword,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"j1UMAdqSqptr7sR3r24YM6oIzBM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","adminUser","setAdminUser","loading","setLoading","getInitialSession","data","session","auth","getSession","loadAdminUser","id","subscription","onAuthStateChange","event","unsubscribe","userId","error","from","select","eq","single","console","signOut","signIn","email","password","signInWithPassword","adminData","adminError","success","message","signUp","insert","user_id","first_name","firstName","last_name","lastName","role","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin","updatePassword","newPassword","updateUser","updateProfile","profileData","update","updated_at","Date","toISOString","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/edwin/Downloads/archive/CHENATIONS DOCUMENTS/Wellsfargo/Wopital/platformAdmin/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [adminUser, setAdminUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (session?.user) {\n        setUser(session.user);\n        await loadAdminUser(session.user.id);\n      }\n      setLoading(false);\n    };\n\n    getInitialSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (session?.user) {\n          setUser(session.user);\n          await loadAdminUser(session.user.id);\n        } else {\n          setUser(null);\n          setAdminUser(null);\n        }\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const loadAdminUser = async (userId) => {\n    try {\n      const { data, error } = await supabase\n        .from('platform_admins')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (error) {\n        console.error('Error loading admin user:', error);\n        // If admin user doesn't exist, sign out\n        await signOut();\n        toast.error('Access denied. Admin privileges required.');\n        return;\n      }\n\n      setAdminUser(data);\n    } catch (error) {\n      console.error('Error loading admin user:', error);\n      await signOut();\n      toast.error('Access denied. Admin privileges required.');\n    }\n  };\n\n  const signIn = async (email, password) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      // Check if user is an admin\n      const { data: adminData, error: adminError } = await supabase\n        .from('platform_admins')\n        .select('*')\n        .eq('user_id', data.user.id)\n        .single();\n\n      if (adminError || !adminData) {\n        await supabase.auth.signOut();\n        throw new Error('Access denied. Admin privileges required.');\n      }\n\n      setUser(data.user);\n      setAdminUser(adminData);\n      toast.success('Welcome back!');\n      return { success: true };\n    } catch (error) {\n      console.error('Error signing in:', error);\n      toast.error(error.message || 'Failed to sign in');\n      return { success: false, error: error.message };\n    }\n  };\n\n  const signUp = async (email, password, adminData) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      // Create admin user record\n      const { error: adminError } = await supabase\n        .from('platform_admins')\n        .insert([\n          {\n            user_id: data.user.id,\n            first_name: adminData.firstName,\n            last_name: adminData.lastName,\n            email: email,\n            role: 'admin',\n          },\n        ]);\n\n      if (adminError) throw adminError;\n\n      setUser(data.user);\n      setAdminUser({\n        user_id: data.user.id,\n        first_name: adminData.firstName,\n        last_name: adminData.lastName,\n        email: email,\n        role: 'admin',\n      });\n\n      toast.success('Admin account created successfully!');\n      return { success: true };\n    } catch (error) {\n      console.error('Error signing up:', error);\n      toast.error(error.message || 'Failed to create admin account');\n      return { success: false, error: error.message };\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n\n      setUser(null);\n      setAdminUser(null);\n      toast.success('Signed out successfully');\n    } catch (error) {\n      console.error('Error signing out:', error);\n      toast.error('Failed to sign out');\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      });\n\n      if (error) throw error;\n\n      toast.success('Password reset email sent!');\n      return { success: true };\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      toast.error(error.message || 'Failed to send reset email');\n      return { success: false, error: error.message };\n    }\n  };\n\n  const updatePassword = async (newPassword) => {\n    try {\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword,\n      });\n\n      if (error) throw error;\n\n      toast.success('Password updated successfully!');\n      return { success: true };\n    } catch (error) {\n      console.error('Error updating password:', error);\n      toast.error(error.message || 'Failed to update password');\n      return { success: false, error: error.message };\n    }\n  };\n\n  const updateProfile = async (profileData) => {\n    try {\n      const { error } = await supabase\n        .from('platform_admins')\n        .update({\n          first_name: profileData.firstName,\n          last_name: profileData.lastName,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('user_id', user.id);\n\n      if (error) throw error;\n\n      setAdminUser({\n        ...adminUser,\n        first_name: profileData.firstName,\n        last_name: profileData.lastName,\n      });\n\n      toast.success('Profile updated successfully!');\n      return { success: true };\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast.error(error.message || 'Failed to update profile');\n      return { success: false, error: error.message };\n    }\n  };\n\n  const value = {\n    user,\n    adminUser,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updatePassword,\n    updateProfile,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}