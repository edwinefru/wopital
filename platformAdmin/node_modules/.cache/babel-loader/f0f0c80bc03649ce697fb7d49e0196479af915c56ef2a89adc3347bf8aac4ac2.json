{"ast":null,"code":"import { supabase } from '../lib/supabase';\n\n// Stripe configuration\nconst STRIPE_PUBLISHABLE_KEY = process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY;\nconst STRIPE_SECRET_KEY = process.env.REACT_APP_STRIPE_SECRET_KEY;\nclass StripeService {\n  constructor() {\n    this.stripe = null;\n    this.initializeStripe();\n  }\n  async initializeStripe() {\n    try {\n      const {\n        default: Stripe\n      } = await import('@stripe/stripe-js');\n      this.stripe = await Stripe(STRIPE_PUBLISHABLE_KEY);\n    } catch (error) {\n      console.error('Failed to initialize Stripe:', error);\n    }\n  }\n\n  // Create a new subscription for a hospital\n  async createSubscription(hospitalId, planId, customerEmail) {\n    try {\n      // Create Stripe customer\n      const customerResponse = await fetch('/api/stripe/create-customer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: customerEmail,\n          hospitalId: hospitalId\n        })\n      });\n      const customerData = await customerResponse.json();\n      if (!customerData.success) {\n        throw new Error(customerData.error);\n      }\n\n      // Create subscription\n      const subscriptionResponse = await fetch('/api/stripe/create-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          customerId: customerData.customerId,\n          priceId: planId,\n          hospitalId: hospitalId\n        })\n      });\n      const subscriptionData = await subscriptionResponse.json();\n      if (!subscriptionData.success) {\n        throw new Error(subscriptionData.error);\n      }\n\n      // Update hospital subscription in database\n      const {\n        error\n      } = await supabase.from('hospital_subscriptions').insert([{\n        hospital_id: hospitalId,\n        stripe_customer_id: customerData.customerId,\n        stripe_subscription_id: subscriptionData.subscriptionId,\n        plan_id: planId,\n        status: 'active',\n        current_period_start: new Date(subscriptionData.currentPeriodStart * 1000).toISOString(),\n        current_period_end: new Date(subscriptionData.currentPeriodEnd * 1000).toISOString()\n      }]);\n      if (error) throw error;\n      return {\n        success: true,\n        subscriptionId: subscriptionData.subscriptionId,\n        customerId: customerData.customerId\n      };\n    } catch (error) {\n      console.error('Error creating subscription:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get subscription details\n  async getSubscription(subscriptionId) {\n    try {\n      const response = await fetch(`/api/stripe/subscription/${subscriptionId}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error getting subscription:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Cancel subscription\n  async cancelSubscription(subscriptionId) {\n    try {\n      const response = await fetch('/api/stripe/cancel-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          subscriptionId: subscriptionId\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        // Update database\n        const {\n          error\n        } = await supabase.from('hospital_subscriptions').update({\n          status: 'cancelled'\n        }).eq('stripe_subscription_id', subscriptionId);\n        if (error) throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error cancelling subscription:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get payment history\n  async getPaymentHistory(customerId) {\n    try {\n      const response = await fetch(`/api/stripe/payment-history/${customerId}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error getting payment history:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Create checkout session for one-time payments\n  async createCheckoutSession(priceId, customerId, successUrl, cancelUrl) {\n    try {\n      const response = await fetch('/api/stripe/create-checkout-session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          priceId: priceId,\n          customerId: customerId,\n          successUrl: successUrl,\n          cancelUrl: cancelUrl\n        })\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error creating checkout session:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get subscription plans\n  async getSubscriptionPlans() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('subscription_plans').select('*').order('price');\n      if (error) throw error;\n      return {\n        success: true,\n        plans: data\n      };\n    } catch (error) {\n      console.error('Error getting subscription plans:', error);\n      return {\n        success: false,\n        error: error.message,\n        plans: []\n      };\n    }\n  }\n\n  // Update subscription\n  async updateSubscription(subscriptionId, newPriceId) {\n    try {\n      const response = await fetch('/api/stripe/update-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          subscriptionId: subscriptionId,\n          newPriceId: newPriceId\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        // Update database\n        const {\n          error\n        } = await supabase.from('hospital_subscriptions').update({\n          plan_id: newPriceId\n        }).eq('stripe_subscription_id', subscriptionId);\n        if (error) throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error updating subscription:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}\nexport default new StripeService();","map":{"version":3,"names":["supabase","STRIPE_PUBLISHABLE_KEY","process","env","REACT_APP_STRIPE_PUBLISHABLE_KEY","STRIPE_SECRET_KEY","REACT_APP_STRIPE_SECRET_KEY","StripeService","constructor","stripe","initializeStripe","default","Stripe","error","console","createSubscription","hospitalId","planId","customerEmail","customerResponse","fetch","method","headers","body","JSON","stringify","email","customerData","json","success","Error","subscriptionResponse","customerId","priceId","subscriptionData","from","insert","hospital_id","stripe_customer_id","stripe_subscription_id","subscriptionId","plan_id","status","current_period_start","Date","currentPeriodStart","toISOString","current_period_end","currentPeriodEnd","message","getSubscription","response","data","cancelSubscription","update","eq","getPaymentHistory","createCheckoutSession","successUrl","cancelUrl","getSubscriptionPlans","select","order","plans","updateSubscription","newPriceId"],"sources":["C:/Users/edwin/Downloads/archive/CHENATIONS DOCUMENTS/Wellsfargo/Wopital/platformAdmin/src/services/stripe.js"],"sourcesContent":["import { supabase } from '../lib/supabase';\r\n\r\n// Stripe configuration\r\nconst STRIPE_PUBLISHABLE_KEY = process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY;\r\nconst STRIPE_SECRET_KEY = process.env.REACT_APP_STRIPE_SECRET_KEY;\r\n\r\nclass StripeService {\r\n  constructor() {\r\n    this.stripe = null;\r\n    this.initializeStripe();\r\n  }\r\n\r\n  async initializeStripe() {\r\n    try {\r\n      const { default: Stripe } = await import('@stripe/stripe-js');\r\n      this.stripe = await Stripe(STRIPE_PUBLISHABLE_KEY);\r\n    } catch (error) {\r\n      console.error('Failed to initialize Stripe:', error);\r\n    }\r\n  }\r\n\r\n  // Create a new subscription for a hospital\r\n  async createSubscription(hospitalId, planId, customerEmail) {\r\n    try {\r\n      // Create Stripe customer\r\n      const customerResponse = await fetch('/api/stripe/create-customer', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: customerEmail,\r\n          hospitalId: hospitalId,\r\n        }),\r\n      });\r\n\r\n      const customerData = await customerResponse.json();\r\n\r\n      if (!customerData.success) {\r\n        throw new Error(customerData.error);\r\n      }\r\n\r\n      // Create subscription\r\n      const subscriptionResponse = await fetch('/api/stripe/create-subscription', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          customerId: customerData.customerId,\r\n          priceId: planId,\r\n          hospitalId: hospitalId,\r\n        }),\r\n      });\r\n\r\n      const subscriptionData = await subscriptionResponse.json();\r\n\r\n      if (!subscriptionData.success) {\r\n        throw new Error(subscriptionData.error);\r\n      }\r\n\r\n      // Update hospital subscription in database\r\n      const { error } = await supabase\r\n        .from('hospital_subscriptions')\r\n        .insert([\r\n          {\r\n            hospital_id: hospitalId,\r\n            stripe_customer_id: customerData.customerId,\r\n            stripe_subscription_id: subscriptionData.subscriptionId,\r\n            plan_id: planId,\r\n            status: 'active',\r\n            current_period_start: new Date(subscriptionData.currentPeriodStart * 1000).toISOString(),\r\n            current_period_end: new Date(subscriptionData.currentPeriodEnd * 1000).toISOString(),\r\n          },\r\n        ]);\r\n\r\n      if (error) throw error;\r\n\r\n      return {\r\n        success: true,\r\n        subscriptionId: subscriptionData.subscriptionId,\r\n        customerId: customerData.customerId,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating subscription:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get subscription details\r\n  async getSubscription(subscriptionId) {\r\n    try {\r\n      const response = await fetch(`/api/stripe/subscription/${subscriptionId}`);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error getting subscription:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Cancel subscription\r\n  async cancelSubscription(subscriptionId) {\r\n    try {\r\n      const response = await fetch('/api/stripe/cancel-subscription', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          subscriptionId: subscriptionId,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        // Update database\r\n        const { error } = await supabase\r\n          .from('hospital_subscriptions')\r\n          .update({ status: 'cancelled' })\r\n          .eq('stripe_subscription_id', subscriptionId);\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error cancelling subscription:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Get payment history\r\n  async getPaymentHistory(customerId) {\r\n    try {\r\n      const response = await fetch(`/api/stripe/payment-history/${customerId}`);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error getting payment history:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Create checkout session for one-time payments\r\n  async createCheckoutSession(priceId, customerId, successUrl, cancelUrl) {\r\n    try {\r\n      const response = await fetch('/api/stripe/create-checkout-session', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          priceId: priceId,\r\n          customerId: customerId,\r\n          successUrl: successUrl,\r\n          cancelUrl: cancelUrl,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error creating checkout session:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Get subscription plans\r\n  async getSubscriptionPlans() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('subscription_plans')\r\n        .select('*')\r\n        .order('price');\r\n\r\n      if (error) throw error;\r\n\r\n      return {\r\n        success: true,\r\n        plans: data,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting subscription plans:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        plans: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update subscription\r\n  async updateSubscription(subscriptionId, newPriceId) {\r\n    try {\r\n      const response = await fetch('/api/stripe/update-subscription', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          subscriptionId: subscriptionId,\r\n          newPriceId: newPriceId,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        // Update database\r\n        const { error } = await supabase\r\n          .from('hospital_subscriptions')\r\n          .update({ plan_id: newPriceId })\r\n          .eq('stripe_subscription_id', subscriptionId);\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error updating subscription:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new StripeService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}