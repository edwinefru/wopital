{"ast":null,"code":"// Rate limiting utility for authentication\nclass RateLimiter {\n  constructor() {\n    this.attempts = new Map();\n    this.maxAttempts = 5;\n    this.windowMs = 15 * 60 * 1000; // 15 minutes\n    this.blockDuration = 30 * 60 * 1000; // 30 minutes\n  }\n\n  // Check if user is rate limited\n  isRateLimited(email) {\n    const now = Date.now();\n    const userAttempts = this.attempts.get(email);\n    if (!userAttempts) {\n      return false;\n    }\n\n    // Clean old attempts outside the window\n    userAttempts.timestamps = userAttempts.timestamps.filter(timestamp => now - timestamp < this.windowMs);\n\n    // Check if user is blocked\n    if (userAttempts.blockedUntil && now < userAttempts.blockedUntil) {\n      return {\n        limited: true,\n        blocked: true,\n        remainingTime: userAttempts.blockedUntil - now,\n        reason: 'Account temporarily blocked due to too many failed attempts'\n      };\n    }\n\n    // Check if user has exceeded max attempts\n    if (userAttempts.timestamps.length >= this.maxAttempts) {\n      // Block the user\n      userAttempts.blockedUntil = now + this.blockDuration;\n      this.attempts.set(email, userAttempts);\n      return {\n        limited: true,\n        blocked: true,\n        remainingTime: this.blockDuration,\n        reason: 'Account temporarily blocked due to too many failed attempts'\n      };\n    }\n    return false;\n  }\n\n  // Record a login attempt\n  recordAttempt(email, success = false) {\n    const now = Date.now();\n    const userAttempts = this.attempts.get(email) || {\n      timestamps: [],\n      blockedUntil: null\n    };\n    if (success) {\n      // Reset on successful login\n      this.attempts.delete(email);\n      return;\n    }\n    userAttempts.timestamps.push(now);\n    this.attempts.set(email, userAttempts);\n  }\n\n  // Get remaining attempts\n  getRemainingAttempts(email) {\n    const userAttempts = this.attempts.get(email);\n    if (!userAttempts) {\n      return this.maxAttempts;\n    }\n    const now = Date.now();\n    const validAttempts = userAttempts.timestamps.filter(timestamp => now - timestamp < this.windowMs);\n    return Math.max(0, this.maxAttempts - validAttempts.length);\n  }\n\n  // Clear attempts for a user (useful for testing)\n  clearAttempts(email) {\n    this.attempts.delete(email);\n  }\n\n  // Get formatted wait time\n  formatWaitTime(ms) {\n    const minutes = Math.floor(ms / 60000);\n    const seconds = Math.floor(ms % 60000 / 1000);\n    if (minutes > 0) {\n      return `${minutes} minute${minutes > 1 ? 's' : ''} ${seconds} second${seconds !== 1 ? 's' : ''}`;\n    }\n    return `${seconds} second${seconds !== 1 ? 's' : ''}`;\n  }\n}\n\n// Exponential backoff utility\nexport const exponentialBackoff = {\n  // Calculate delay with exponential backoff\n  calculateDelay(attempt, baseDelay = 1000, maxDelay = 30000) {\n    const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n    return delay + Math.random() * 1000; // Add jitter\n  },\n  // Wait for specified time\n  wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  },\n  // Retry function with exponential backoff\n  async retry(fn, maxAttempts = 3, baseDelay = 1000) {\n    let lastError;\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on rate limit errors\n        if (error.message.includes('rate limit') || error.message.includes('too many requests')) {\n          throw error;\n        }\n        if (attempt === maxAttempts - 1) {\n          throw error;\n        }\n        const delay = this.calculateDelay(attempt, baseDelay);\n        console.log(`Retry attempt ${attempt + 1}/${maxAttempts} in ${delay}ms`);\n        await this.wait(delay);\n      }\n    }\n    throw lastError;\n  }\n};\n\n// Create singleton instance\nexport const rateLimiter = new RateLimiter();\n\n// Helper function to check and handle rate limiting\nexport const checkRateLimit = email => {\n  const rateLimitResult = rateLimiter.isRateLimited(email);\n  if (rateLimitResult) {\n    const waitTime = rateLimiter.formatWaitTime(rateLimitResult.remainingTime);\n    throw new Error(`Rate limit exceeded. Please wait ${waitTime} before trying again.`);\n  }\n  return rateLimiter.getRemainingAttempts(email);\n};\n\n// Helper function to record login attempt\nexport const recordLoginAttempt = (email, success = false) => {\n  rateLimiter.recordAttempt(email, success);\n};","map":{"version":3,"names":["RateLimiter","constructor","attempts","Map","maxAttempts","windowMs","blockDuration","isRateLimited","email","now","Date","userAttempts","get","timestamps","filter","timestamp","blockedUntil","limited","blocked","remainingTime","reason","length","set","recordAttempt","success","delete","push","getRemainingAttempts","validAttempts","Math","max","clearAttempts","formatWaitTime","ms","minutes","floor","seconds","exponentialBackoff","calculateDelay","attempt","baseDelay","maxDelay","delay","min","pow","random","wait","Promise","resolve","setTimeout","retry","fn","lastError","error","message","includes","console","log","rateLimiter","checkRateLimit","rateLimitResult","waitTime","Error","recordLoginAttempt"],"sources":["C:/Users/edwin/Downloads/archive/CHENATIONS DOCUMENTS/Wellsfargo/Wopital/hospitalAdmin/src/utils/rateLimit.js"],"sourcesContent":["// Rate limiting utility for authentication\r\nclass RateLimiter {\r\n  constructor() {\r\n    this.attempts = new Map();\r\n    this.maxAttempts = 5;\r\n    this.windowMs = 15 * 60 * 1000; // 15 minutes\r\n    this.blockDuration = 30 * 60 * 1000; // 30 minutes\r\n  }\r\n\r\n  // Check if user is rate limited\r\n  isRateLimited(email) {\r\n    const now = Date.now();\r\n    const userAttempts = this.attempts.get(email);\r\n\r\n    if (!userAttempts) {\r\n      return false;\r\n    }\r\n\r\n    // Clean old attempts outside the window\r\n    userAttempts.timestamps = userAttempts.timestamps.filter(\r\n      timestamp => now - timestamp < this.windowMs\r\n    );\r\n\r\n    // Check if user is blocked\r\n    if (userAttempts.blockedUntil && now < userAttempts.blockedUntil) {\r\n      return {\r\n        limited: true,\r\n        blocked: true,\r\n        remainingTime: userAttempts.blockedUntil - now,\r\n        reason: 'Account temporarily blocked due to too many failed attempts'\r\n      };\r\n    }\r\n\r\n    // Check if user has exceeded max attempts\r\n    if (userAttempts.timestamps.length >= this.maxAttempts) {\r\n      // Block the user\r\n      userAttempts.blockedUntil = now + this.blockDuration;\r\n      this.attempts.set(email, userAttempts);\r\n      \r\n      return {\r\n        limited: true,\r\n        blocked: true,\r\n        remainingTime: this.blockDuration,\r\n        reason: 'Account temporarily blocked due to too many failed attempts'\r\n      };\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // Record a login attempt\r\n  recordAttempt(email, success = false) {\r\n    const now = Date.now();\r\n    const userAttempts = this.attempts.get(email) || {\r\n      timestamps: [],\r\n      blockedUntil: null\r\n    };\r\n\r\n    if (success) {\r\n      // Reset on successful login\r\n      this.attempts.delete(email);\r\n      return;\r\n    }\r\n\r\n    userAttempts.timestamps.push(now);\r\n    this.attempts.set(email, userAttempts);\r\n  }\r\n\r\n  // Get remaining attempts\r\n  getRemainingAttempts(email) {\r\n    const userAttempts = this.attempts.get(email);\r\n    if (!userAttempts) {\r\n      return this.maxAttempts;\r\n    }\r\n\r\n    const now = Date.now();\r\n    const validAttempts = userAttempts.timestamps.filter(\r\n      timestamp => now - timestamp < this.windowMs\r\n    );\r\n\r\n    return Math.max(0, this.maxAttempts - validAttempts.length);\r\n  }\r\n\r\n  // Clear attempts for a user (useful for testing)\r\n  clearAttempts(email) {\r\n    this.attempts.delete(email);\r\n  }\r\n\r\n  // Get formatted wait time\r\n  formatWaitTime(ms) {\r\n    const minutes = Math.floor(ms / 60000);\r\n    const seconds = Math.floor((ms % 60000) / 1000);\r\n    \r\n    if (minutes > 0) {\r\n      return `${minutes} minute${minutes > 1 ? 's' : ''} ${seconds} second${seconds !== 1 ? 's' : ''}`;\r\n    }\r\n    return `${seconds} second${seconds !== 1 ? 's' : ''}`;\r\n  }\r\n}\r\n\r\n// Exponential backoff utility\r\nexport const exponentialBackoff = {\r\n  // Calculate delay with exponential backoff\r\n  calculateDelay(attempt, baseDelay = 1000, maxDelay = 30000) {\r\n    const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\r\n    return delay + Math.random() * 1000; // Add jitter\r\n  },\r\n\r\n  // Wait for specified time\r\n  wait(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  },\r\n\r\n  // Retry function with exponential backoff\r\n  async retry(fn, maxAttempts = 3, baseDelay = 1000) {\r\n    let lastError;\r\n\r\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\r\n      try {\r\n        return await fn();\r\n      } catch (error) {\r\n        lastError = error;\r\n        \r\n        // Don't retry on rate limit errors\r\n        if (error.message.includes('rate limit') || error.message.includes('too many requests')) {\r\n          throw error;\r\n        }\r\n\r\n        if (attempt === maxAttempts - 1) {\r\n          throw error;\r\n        }\r\n\r\n        const delay = this.calculateDelay(attempt, baseDelay);\r\n        console.log(`Retry attempt ${attempt + 1}/${maxAttempts} in ${delay}ms`);\r\n        await this.wait(delay);\r\n      }\r\n    }\r\n\r\n    throw lastError;\r\n  }\r\n};\r\n\r\n// Create singleton instance\r\nexport const rateLimiter = new RateLimiter();\r\n\r\n// Helper function to check and handle rate limiting\r\nexport const checkRateLimit = (email) => {\r\n  const rateLimitResult = rateLimiter.isRateLimited(email);\r\n  \r\n  if (rateLimitResult) {\r\n    const waitTime = rateLimiter.formatWaitTime(rateLimitResult.remainingTime);\r\n    throw new Error(`Rate limit exceeded. Please wait ${waitTime} before trying again.`);\r\n  }\r\n  \r\n  return rateLimiter.getRemainingAttempts(email);\r\n};\r\n\r\n// Helper function to record login attempt\r\nexport const recordLoginAttempt = (email, success = false) => {\r\n  rateLimiter.recordAttempt(email, success);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}