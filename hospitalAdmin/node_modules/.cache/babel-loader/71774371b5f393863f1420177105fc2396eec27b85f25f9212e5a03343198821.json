{"ast":null,"code":"import axios from 'axios';\nimport { supabase } from '../lib/supabase';\nclass MTNMobileMoneyService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_MTN_API_URL || 'https://sandbox.momodeveloper.mtn.com';\n    this.apiKey = process.env.REACT_APP_MTN_API_KEY;\n    this.apiSecret = process.env.REACT_APP_MTN_API_SECRET;\n    this.subscriptionKey = process.env.REACT_APP_MTN_SUBSCRIPTION_KEY;\n    this.targetEnvironment = process.env.REACT_APP_MTN_ENVIRONMENT || 'sandbox';\n  }\n\n  // Get access token\n  async getAccessToken() {\n    try {\n      const response = await axios.post(`${this.baseURL}/collection/oauth2/token`, {}, {\n        headers: {\n          'Authorization': `Basic ${btoa(`${this.apiKey}:${this.apiSecret}`)}`,\n          'X-Reference-Id': this.generateReferenceId(),\n          'X-Target-Environment': this.targetEnvironment,\n          'Ocp-Apim-Subscription-Key': this.subscriptionKey\n        }\n      });\n      return response.data.access_token;\n    } catch (error) {\n      console.error('Error getting MTN access token:', error);\n      throw error;\n    }\n  }\n\n  // Generate unique reference ID\n  generateReferenceId() {\n    return `ref_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Request payment\n  async requestPayment(phoneNumber, amount, description, reference) {\n    try {\n      const accessToken = await this.getAccessToken();\n      const referenceId = this.generateReferenceId();\n      const paymentData = {\n        amount: amount.toString(),\n        currency: 'UGX',\n        externalId: reference,\n        payer: {\n          partyIdType: 'MSISDN',\n          partyId: phoneNumber\n        },\n        payerMessage: description,\n        payeeNote: description\n      };\n      const response = await axios.post(`${this.baseURL}/collection/v1_0/requesttopay`, paymentData, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'X-Reference-Id': referenceId,\n          'X-Target-Environment': this.targetEnvironment,\n          'Ocp-Apim-Subscription-Key': this.subscriptionKey,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Save transaction to database\n      await this.saveTransaction({\n        transaction_id: referenceId,\n        phone_number: phoneNumber,\n        amount: amount,\n        description: description,\n        reference: reference,\n        status: 'pending',\n        api_response: response.data\n      });\n      return {\n        success: true,\n        referenceId,\n        status: 'pending'\n      };\n    } catch (error) {\n      console.error('Error requesting MTN payment:', error);\n      throw error;\n    }\n  }\n\n  // Check payment status\n  async checkPaymentStatus(referenceId) {\n    try {\n      const accessToken = await this.getAccessToken();\n      const response = await axios.get(`${this.baseURL}/collection/v1_0/requesttopay/${referenceId}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'X-Target-Environment': this.targetEnvironment,\n          'Ocp-Apim-Subscription-Key': this.subscriptionKey\n        }\n      });\n      const status = response.data.status;\n\n      // Update transaction status in database\n      await this.updateTransactionStatus(referenceId, status);\n      return {\n        success: true,\n        status,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Error checking MTN payment status:', error);\n      throw error;\n    }\n  }\n\n  // Save transaction to database\n  async saveTransaction(transactionData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('mtn_mobile_money_transactions').insert([transactionData]);\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error saving MTN transaction:', error);\n      throw error;\n    }\n  }\n\n  // Update transaction status\n  async updateTransactionStatus(referenceId, status) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('mtn_mobile_money_transactions').update({\n        status,\n        updated_at: new Date().toISOString()\n      }).eq('transaction_id', referenceId);\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating MTN transaction status:', error);\n      throw error;\n    }\n  }\n\n  // Get transaction by reference ID\n  async getTransaction(referenceId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('mtn_mobile_money_transactions').select('*').eq('transaction_id', referenceId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting MTN transaction:', error);\n      throw error;\n    }\n  }\n\n  // Get all transactions\n  async getAllTransactions(limit = 100) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('mtn_mobile_money_transactions').select('*').order('created_at', {\n        ascending: false\n      }).limit(limit);\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error getting MTN transactions:', error);\n      throw error;\n    }\n  }\n\n  // Process subscription payment\n  async processSubscriptionPayment(subscriptionData) {\n    try {\n      const {\n        phoneNumber,\n        amount,\n        planName,\n        entityType,\n        entityId\n      } = subscriptionData;\n      const description = `DigiCare ${planName} subscription`;\n      const reference = `${entityType}_${entityId}_${Date.now()}`;\n      const paymentResult = await this.requestPayment(phoneNumber, amount, description, reference);\n      return {\n        success: true,\n        paymentResult,\n        reference\n      };\n    } catch (error) {\n      console.error('Error processing subscription payment:', error);\n      throw error;\n    }\n  }\n}\nexport const mtnMobileMoneyService = new MTNMobileMoneyService();","map":{"version":3,"names":["axios","supabase","MTNMobileMoneyService","constructor","baseURL","process","env","REACT_APP_MTN_API_URL","apiKey","REACT_APP_MTN_API_KEY","apiSecret","REACT_APP_MTN_API_SECRET","subscriptionKey","REACT_APP_MTN_SUBSCRIPTION_KEY","targetEnvironment","REACT_APP_MTN_ENVIRONMENT","getAccessToken","response","post","headers","btoa","generateReferenceId","data","access_token","error","console","Date","now","Math","random","toString","substr","requestPayment","phoneNumber","amount","description","reference","accessToken","referenceId","paymentData","currency","externalId","payer","partyIdType","partyId","payerMessage","payeeNote","saveTransaction","transaction_id","phone_number","status","api_response","success","checkPaymentStatus","get","updateTransactionStatus","transactionData","from","insert","update","updated_at","toISOString","eq","getTransaction","select","single","getAllTransactions","limit","order","ascending","processSubscriptionPayment","subscriptionData","planName","entityType","entityId","paymentResult","mtnMobileMoneyService"],"sources":["C:/Users/edwin/Downloads/archive/CHENATIONS DOCUMENTS/Wellsfargo/Wopital/DigiCare/web-dashboard/src/services/mtnMobileMoney.js"],"sourcesContent":["import axios from 'axios';\r\nimport { supabase } from '../lib/supabase';\r\n\r\nclass MTNMobileMoneyService {\r\n  constructor() {\r\n    this.baseURL = process.env.REACT_APP_MTN_API_URL || 'https://sandbox.momodeveloper.mtn.com';\r\n    this.apiKey = process.env.REACT_APP_MTN_API_KEY;\r\n    this.apiSecret = process.env.REACT_APP_MTN_API_SECRET;\r\n    this.subscriptionKey = process.env.REACT_APP_MTN_SUBSCRIPTION_KEY;\r\n    this.targetEnvironment = process.env.REACT_APP_MTN_ENVIRONMENT || 'sandbox';\r\n  }\r\n\r\n  // Get access token\r\n  async getAccessToken() {\r\n    try {\r\n      const response = await axios.post(\r\n        `${this.baseURL}/collection/oauth2/token`,\r\n        {},\r\n        {\r\n          headers: {\r\n            'Authorization': `Basic ${btoa(`${this.apiKey}:${this.apiSecret}`)}`,\r\n            'X-Reference-Id': this.generateReferenceId(),\r\n            'X-Target-Environment': this.targetEnvironment,\r\n            'Ocp-Apim-Subscription-Key': this.subscriptionKey,\r\n          },\r\n        }\r\n      );\r\n      return response.data.access_token;\r\n    } catch (error) {\r\n      console.error('Error getting MTN access token:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate unique reference ID\r\n  generateReferenceId() {\r\n    return `ref_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  // Request payment\r\n  async requestPayment(phoneNumber, amount, description, reference) {\r\n    try {\r\n      const accessToken = await this.getAccessToken();\r\n      const referenceId = this.generateReferenceId();\r\n\r\n      const paymentData = {\r\n        amount: amount.toString(),\r\n        currency: 'UGX',\r\n        externalId: reference,\r\n        payer: {\r\n          partyIdType: 'MSISDN',\r\n          partyId: phoneNumber\r\n        },\r\n        payerMessage: description,\r\n        payeeNote: description\r\n      };\r\n\r\n      const response = await axios.post(\r\n        `${this.baseURL}/collection/v1_0/requesttopay`,\r\n        paymentData,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'X-Reference-Id': referenceId,\r\n            'X-Target-Environment': this.targetEnvironment,\r\n            'Ocp-Apim-Subscription-Key': this.subscriptionKey,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      // Save transaction to database\r\n      await this.saveTransaction({\r\n        transaction_id: referenceId,\r\n        phone_number: phoneNumber,\r\n        amount: amount,\r\n        description: description,\r\n        reference: reference,\r\n        status: 'pending',\r\n        api_response: response.data\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        referenceId,\r\n        status: 'pending'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error requesting MTN payment:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Check payment status\r\n  async checkPaymentStatus(referenceId) {\r\n    try {\r\n      const accessToken = await this.getAccessToken();\r\n\r\n      const response = await axios.get(\r\n        `${this.baseURL}/collection/v1_0/requesttopay/${referenceId}`,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'X-Target-Environment': this.targetEnvironment,\r\n            'Ocp-Apim-Subscription-Key': this.subscriptionKey,\r\n          },\r\n        }\r\n      );\r\n\r\n      const status = response.data.status;\r\n      \r\n      // Update transaction status in database\r\n      await this.updateTransactionStatus(referenceId, status);\r\n\r\n      return {\r\n        success: true,\r\n        status,\r\n        data: response.data\r\n      };\r\n    } catch (error) {\r\n      console.error('Error checking MTN payment status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Save transaction to database\r\n  async saveTransaction(transactionData) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('mtn_mobile_money_transactions')\r\n        .insert([transactionData]);\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error saving MTN transaction:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update transaction status\r\n  async updateTransactionStatus(referenceId, status) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('mtn_mobile_money_transactions')\r\n        .update({ \r\n          status,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('transaction_id', referenceId);\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error updating MTN transaction status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get transaction by reference ID\r\n  async getTransaction(referenceId) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('mtn_mobile_money_transactions')\r\n        .select('*')\r\n        .eq('transaction_id', referenceId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error getting MTN transaction:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all transactions\r\n  async getAllTransactions(limit = 100) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('mtn_mobile_money_transactions')\r\n        .select('*')\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error getting MTN transactions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Process subscription payment\r\n  async processSubscriptionPayment(subscriptionData) {\r\n    try {\r\n      const { phoneNumber, amount, planName, entityType, entityId } = subscriptionData;\r\n      \r\n      const description = `DigiCare ${planName} subscription`;\r\n      const reference = `${entityType}_${entityId}_${Date.now()}`;\r\n\r\n      const paymentResult = await this.requestPayment(\r\n        phoneNumber,\r\n        amount,\r\n        description,\r\n        reference\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        paymentResult,\r\n        reference\r\n      };\r\n    } catch (error) {\r\n      console.error('Error processing subscription payment:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const mtnMobileMoneyService = new MTNMobileMoneyService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}